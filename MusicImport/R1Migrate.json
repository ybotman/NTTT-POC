#!/usr/bin/env python3
"""
random_subset_songs.py

This script performs the following:
1. Selects a random subset of songs from `tango_songs_copy.json`.
2. Creates a subset JSON file in a new directory `./R1`.
3. Copies the corresponding `.wav` files to the `./R1` directory.

Usage:
    Ensure `tango_songs_copy.json` and WAV files are present in the appropriate directories.
    Run the script:
        python3 random_subset_songs.py

Outputs:
    - ./R1/tango_songs_copy_R1.json: A random subset of songs.
    - WAV files copied to the `./R1` directory.
"""

import json
import random
import os
import shutil
from pathlib import Path

# Paths
BASE_DIR = Path.cwd()
INPUT_JSON = BASE_DIR / "tango_songs_copy.json"
OUTPUT_DIR = BASE_DIR / "R1"
OUTPUT_JSON = OUTPUT_DIR / "tango_songs_copy_R1.json"
WAV_SOURCE_DIR = Path("/Users/tobybalsley/Music/RecordedWAVs")

# Configuration
SUBSET_SIZE = 100  # Number of random songs to select

def load_json_file(filepath):
    """
    Load JSON data from a file.

    Parameters:
        filepath (Path): Path to the JSON file.

    Returns:
        list: List of song dictionaries.

    Raises:
        FileNotFoundError: If the file does not exist.
        json.JSONDecodeError: If the file contains invalid JSON.
    """
    try:
        with filepath.open("r", encoding="utf-8") as f:
            data = json.load(f)
        return data
    except FileNotFoundError:
        raise FileNotFoundError(f"File not found: {filepath}")
    except json.JSONDecodeError as e:
        raise ValueError(f"Invalid JSON format in {filepath}: {e}")

def save_json_file(data, filepath):
    """
    Save data to a JSON file with indentation.

    Parameters:
        data (list): Data to save.
        filepath (Path): Path to the output JSON file.

    Raises:
        IOError: If writing to the file fails.
    """
    try:
        with filepath.open("w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except IOError as e:
        raise IOError(f"Error writing to {filepath}: {e}")

def copy_wav_files(song_ids, source_dir, destination_dir):
    """
    Copy WAV files corresponding to song IDs to the destination directory.

    Parameters:
        song_ids (list): List of song IDs.
        source_dir (Path): Path to the directory containing WAV files.
        destination_dir (Path): Path to the directory to copy WAV files to.
    """
    if not destination_dir.exists():
        destination_dir.mkdir(parents=True)
    
    for song_id in song_ids:
        wav_file = source_dir / f"{song_id}.wav"
        if wav_file.exists():
            shutil.copy(wav_file, destination_dir)
        else:
            print(f"WARNING: WAV file not found: {wav_file}")

def main():
    """
    Main function to orchestrate the process.
    """
    try:
        # Load songs from JSON
        songs = load_json_file(INPUT_JSON)
    except Exception as e:
        print(f"Error loading JSON: {e}")
        return

    # Select a random subset of songs
    subset = random.sample(songs, SUBSET_SIZE)

    # Extract song IDs from the subset
    song_ids = [song["songId"] for song in subset]

    # Create R1 directory if not exists
    OUTPUT_DIR.mkdir(exist_ok=True)

    # Save the subset JSON
    try:
        save_json_file(subset, OUTPUT_JSON)
    except Exception as e:
        print(f"Error saving subset JSON: {e}")
        return

    # Copy the corresponding WAV files
    try:
        copy_wav_files(song_ids, WAV_SOURCE_DIR, OUTPUT_DIR)
    except Exception as e:
        print(f"Error copying WAV files: {e}")
        return

    print(f"Subset JSON saved to: {OUTPUT_JSON}")
    print(f"WAV files copied to: {OUTPUT_DIR}")

if __name__ == "__main__":
    main()